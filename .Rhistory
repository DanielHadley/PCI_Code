setwd("K:/Somerstat/Common/Data/2014 StreetStat/PCI_Code")
my.df <- read.csv("/PCI.csv")
my.df <- read.csv("PCI.csv")
#
my.df$sq.ft <- my.df$PavementWi * my.df$Length
my.df$sq.yd <- my.df$sq.ft * 0.111111
my.df$total.pci <- my.df$sq.yd * my.df$OCI
View(my.df)
hist(my.df$total.pci)
hist(log(my.df$total.pci))
View(my.df)
plot(my.df$ExtendedCo, my.df$sq.yd)
plot(log(my.df$ExtendedCo), log(my.df$sq.yd))
my.df$ideal.pci <- my.df$sq.yd * 95
my.df$delta.pci <- my.df$ideal.pci - my.df$total.pci
hist(my.df$delta.pci)
my.df$delta.over.cost <- my.df$delta.pci / my.df$ExtendedCo
hist(my.df$delta.over.cost)
View(my.df)
aggregate(delta.over.cost ~ PlanActivi, my.df, average ) # makes a two-way table
aggregate(delta.over.cost ~ PlanActivi, my.df, mean ) # makes a two-way table
aggregate(OCI ~ PlanActivi, my.df, mean ) # makes a two-way table
plot(my.df$BeginningS, my.df$OCI)
plot(log(my.df$BeginningS), log(my.df$OCI))
plot(log(my.df$BeginningS), log(my.df$Length))
aggregate(delta.over.cost ~ PlanActivi, my.df, mean ) # Crack Seal is crazy cost efficient
biggest.bang <- my.df[which(delta.over.cost > 9),]
biggest.bang <- my.df[which(my.df$delta.over.cost > 9),]
View(biggest.bang)
sum(my.df$ExtendedCo)
sum(biggest.bang$ExtendedCo)
biggest.bang <- my.df[which(my.df$delta.over.cost > 7),]
sum(biggest.bang$ExtendedCo)
biggest.bang <- my.df[which(my.df$delta.over.cost > 4),]
sum(biggest.bang$ExtendedCo)
biggest.bang <- my.df[which(my.df$delta.over.cost > 0),]
sum(biggest.bang$ExtendedCo)
biggest.bang <- my.df[which(my.df$delta.over.cost > 1),]
sum(biggest.bang$ExtendedCo)
biggest.bang <- my.df[which(my.df$delta.over.cost > 2),]
sum(biggest.bang$ExtendedCo)\
sum(biggest.bang$ExtendedCo)\
sum(biggest.bang$ExtendedCo)
biggest.bang <- my.df[which(my.df$delta.over.cost > 2),]
sum(biggest.bang$ExtendedCo)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
f
f(0,1)
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
buys <- rnorm(1:100)
buys <- data.frame(a*100)
buys <- rnorm(1:100)
buys <- data.frame(a*100)
buys <- round(abs(a), 2)
buys=rnorm(10000,mean=50,sd=10)
num_buys=function(x){return(length(buys[buys<=x+10 & buys>=x-10]))}
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
maximum
$maximum
hist(buys)
hist(num_buys)
num_buys
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
num_buys(buys)
num_buys(buys)
num_buys=function(x){return(x^2)}
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
num_buys(buys)
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
num_buys=function(x){return(sum(x))}
num_buys(buys)
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
buys=rnorm(10000,mean=50,sd=10)
num_buys=function(x){return(length(buys[buys<=x+10 & buys>=x-10]))}
optimize(f=num_buys,interval=c(min(buys),max(buys)),maximum=TRUE)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.factor(sample(10)), col3 = letters[1:10],
col4 = sample(c(TRUE, FALSE), 10, replace = TRUE))
View(my.df)
View(my.df)
View(my.df)
View(my.df)
my.df <- data.frame(col1 = sample(c(0,1), 10, replace = TRUE),
col2 = as.factor(sample(10)))
View(my.df)
my.df$col3 <- ifelse((my.df$col1 = 1), 0,
ifelse((my.df$col1 = 0), col2 *2)))
my.df$col3 <- ifelse((my.df$col1 = 1), 0,
ifelse((my.df$col1 = 0), col2 *2))
View(my.df)
my.df$col3 <- ifelse((my.df$col1 = 1), 0,
ifelse((my.df$col1 = 0), my.df$col2 *2))
View(my.df)
my.df <- data.frame(col1 = sample(c(0,1), 10, replace = TRUE),
col2 = as.factor(sample(10)))
my.df$col3 <- ifelse((my.df$col1 = 1), 0,
ifelse((my.df$col1 = 0), my.df$col2 *2))
View(my.df)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.factor(sample(10)))
View(my.df)
my.df$col3 <- ifelse((my.df$col1 = 1), 0,
ifelse((my.df$col1 = 2), my.df$col2 *2))
View(my.df)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.factor(sample(10)))
View(my.df)
my.df$col3 <- ifelse((my.df$col1 = 1), 0,
ifelse((my.df$col1 = 2), my.df$col2 *2))
View(my.df)
my.df$col3 <- ifelse(my.df$col1 = 1), 0,
ifelse((my.df$col1 = 2), my.df$col2 *2)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.numeric(sample(10)))
my.df$col3 <- ifelse(my.df$col1 = 1), 0,
ifelse((my.df$col1 = 2), my.df$col2 *2)
my.df$col3 <- ifelse(my.df$col1 == 1), 0,
ifelse((my.df$col1 == 2), my.df$col2 *2)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.numeric(sample(10)))
my.df$col3 <- ifelse(my.df$col1 == 1), 0,
ifelse((my.df$col1 == 2), my.df$col2 *2)
my.df$bin <- ifelse(my.df$col1<=2,1,0)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.numeric(sample(10)))
my.df$bin <- ifelse(my.df$col1<=2,1,0)
View(my.df)
my.df$bin <- ifelse(my.df$col1<2,1,0)
View(my.df)
my.df$bin <- ifelse(my.df$col1<2,1,my.df$col2 *2)
View(my.df)
my.df$bin <- ifelse(my.df$col1<2,0,my.df$col2 *2)
View(my.df)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.numeric(sample(10)))
num_buys=function(x){return(ifelse(my.df$col1<2,0,my.df$col2 *2))}
num_buys(my.df$col1)
my.df <- data.frame(col1 = sample(c(0,1), 10, replace = TRUE),
col2 = as.numeric(sample(10)))
View(my.df)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
View(my.df)
my.df$fy.two <- ifelse(my.df$col1<1,0,my.df$col2 *2)
my.df$fy.two <- ifelse(my.df$pave>1,0,my.df$cost *2)
View(my.df)
my.df$fy.two <- ifelse(my.df$pave>0,0,my.df$cost *2)
View(my.df)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
my.df$fy.two.cost <- ifelse(my.df$pave>0,0,my.df$cost *2)
totalCost=function(x){return(sum(my.df$fy.two.cost))}
set.seed(1)
A <- runif(100)
B <- runif(100)
C <- runif(100)
hist(A)
pars <- c(x=1,y=1)
hist(pars)
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)
}
optim(pars,OptPars,A=A,B=B,C=C)
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)}
optim(pars,OptPars,A=A,B=B,C=C)
)
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)})
OptPars <- function(pars,A,B,C){
D <- A*pars}
optim(pars,OptPars,A=A,B=B,C=C)
pars
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)
}
optim(pars,OptPars,A=A,B=B,C=C)
D <- A*pars[1]+B*pars[2]
-cor(C,D)
my.df$D <- A*pars[1]+B*pars[2]
-cor(C,D)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
View(my.df)
my.df <- data.frame
my.df <- data.frame(my.df$A <- runif(100))
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
my.df$fy.two.cost <- ifelse(my.df$pave>0,0,my.df$cost *2)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
View(my.df)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- c(x=0,y=1)
pave
OptPave <- function(pave,my.df$cost){
D <- my.df$cost*pave[1]
}
OptPave <- function(pave,my.df$cost){
D <- my.df$cost*pave[2]
}
OptPave <- function(pave,my.df$cost){
D <- my.df$cost*pave[2]}
OptPave <- function(pave,my.df$cost){
D <- my.df$cost*pave[2]
sum(my.df$cost)
}
OptPave <- function(pave,my.df$cost){
D <- my.df$cost*pave[2]
sum(my.df$cost)
optim(pave,OptPave,A=my.df$cost)
OptPave <- function(pave,my.df$cost){
D <- my.df$cost*pave[2]
sum(my.df$cost)
OptPave <- function(pave,A){
D <- my.df$cost*pave[2]
sum(my.df$cost)
OptPave <- function(pave,A){
D <- my.df$cost*pave[2]
sum(my.df$cost)
}
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- c(x=0,y=1)
OptPave <- function(pave,A){
D <- my.df$cost*pave[2]
sum(my.df$cost)
}
optim(pave,OptPave,A=my.df$cost)
OptPave <- function(pave,A){
D <- my.df$cost*pave[2]
sum(my.df$cost),
}
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
pave <- c(x=0,y=1)
OptPave <- function(pave,A){
D <- A *pave[2]
}
optim(pave,OptPave,A=my.df$cost)
OptPave <- function(pave,A){
ifelse(pave>0,0,A *2)
sum(A)
}
OptPave(pave, my.df$cost)
optim(pave,OptPave,A=my.df$cost)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
pave <- c(x=0,y=1)
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- c(x=0)
pave
my.df <- data.frame(pave = sample(c(0,1), 10, replace = TRUE),
cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- c(x=0)
OptPave <- function(pave,A){
ifelse(pave<1,0, A *2)
sum(A)
}
OptPave(pave, my.df$cost)
set.seed(1)
A <- runif(100)
B <- runif(100)
C <- runif(100)
# these are your x and y to optimize
pars <- c(x=1,y=1)
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)
}
optim(pars,OptPars,A=A,B=B,C=C)
my.df <- data.frame(cost = as.numeric(sample(10)))
pave <- c(x=1, y=1)
OptPave <- function(pave,A){
pave * A
sum(A)
}
OptPave(pave, my.df$cost)
optim(pave,OptPave,A=my.df$cost)
my.df <- data.frame(cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- c(x=1, y=0)
OptPave <- function(pave,A){
pave * A
sum(A)
}
OptPave(pave, my.df$cost)
optim(pave,OptPave,A=my.df$cost)
OptPave(pave, my.df$cost)
my.df <- data.frame(cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- c(x=0, y=1)
OptPave <- function(pave,A){
pave * A
sum(pave * A)
}
OptPave(pave, my.df$cost)
optim(pave,OptPave,A=my.df$cost)
my.df <- data.frame(cost = as.numeric(sample(10)))
pave <- c(x=0, y=1)
my.df <- data.frame(cost = as.numeric(sample(10)))
# these are your x and y to optimize
pave <- 1
OptPave <- function(pave,A){
pave * A
sum(pave * A)
}
OptPave(pave, my.df$cost)
optim(pave,OptPave,A=my.df$cost)
pave <- 1
OptPave(pave, my.df$cost)
my.df <- data.frame(cost = as.numeric(sample(10)))
my.df$pave <- 1
OptPave <- function(A,B){
A * B
sum(A * B)
}
OptPave(my.df$pave, my.df$cost)
optim(my.df$pave,OptPave,A=my.df$cost)
View(my.df)
OptPave(my.df$pave, my.df$cost)
setwd("K:/Somerstat/Common/Data/2014 StreetStat/PCI_Code")
my.df <- read.csv("PCI.csv")
my.df$sq.ft <- my.df$PavementWi * my.df$Length
my.df$sq.yd <- my.df$sq.ft * 0.111111
my.df$total.pci <- my.df$sq.yd * my.df$OCI
my.df$ideal.pci <- my.df$sq.yd * 95
my.df$delta.pci <- my.df$ideal.pci - my.df$total.pci
my.df$delta.over.cost <- my.df$delta.pci / my.df$ExtendedCo
aggregate(delta.over.cost ~ PlanActivi, my.df, mean ) # Crack Seal is crazy cost efficient
summarize(my.df$sq.ft)
summary(my.df$sq.ft)
hist(my.df$sq.ft)
hist(log(my.df$sq.ft))
