flights <- data.frame(price = rnorm(n=50, m=650, sd=100))
hist(flights$price)
flights <- data.frame(price = rnorm(n=50, m=650, sd=80))
hist(flights$price)
flights <- data.frame(price = rnorm(n=50, m=650, sd=85))
hist(flights$price)
flights <- data.frame(price = rnorm(n=50, m=650, sd=90))
hist(flights$price)
flights <- data.frame(price = rnorm(n=50, m=650, sd=90))
hist(flights$price)
flights <- data.frame(price = rnorm(n=50, m=880, sd=200))
hist(flights$price)
flights <- data.frame(price = rnorm(n=50, m=880, sd=200))
hist(flights$price)
my.df <- read.delim("clipboard")
summary(my.df)
summary(my.df$Address)
summary(my.df$Quantity)
summary(my.df$Marking)
thermo <- my.df(which(my.df$Material=="Thermoplastic"))
thermo <- my.df(which(Material=="Thermoplastic"))
thermo <- my.df[which(Material=="Thermoplastic")]
thermo <- my.df[which(my.df$Material=="Thermoplastic")]
thermo <- my.df[which(my.df$Material=="Thermoplastic")]
thermo <- my.df[which(my.df$Material="Thermoplastic")]
thermo <- my.df[which(my.df$Material == "Thermoplastic")]
View(my.df)
thermo <- my.df[which(my.df$Material == "Thermoplastic")]
thermo <- my.df[which(Material == "Thermoplastic")]
thermo <- my.df[which(Material == "Thermoplastic")]
thermo <- my.df[which(Material == "Thermoplastic"),]
View(my.df)
thermo <- my.df[ which(Material == "Thermoplastic"),]
thermo <- my.df[ which(City == "Somerville"),]
thermo <- my.df[ which(City == 'Somerville'),]
View(my.df)
names(my.df)
thermo <- my.df[ which(Material == "Thermoplastic"),]
summary(my.df$Material)
thermo <- my.df[ which(my.df$Material == "Thermoplastic"),]
View(thermo)
summary(thermo)
thermo$Street_Section
thermo$Intersection
Pavement_Marking_Maintenance <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/Pavement_Marking_Maintenance.csv")
View(Pavement_Marking_Maintenance)
my.df <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/Pavement_Marking_Maintenance.csv")
setwd("K:/Somerstat/Common/Data/2014 StreetStat")
thermo <- my.df[ which(my.df$Material == "Thermoplastic"),]
ticketdump <- read.csv("K:/Somerstat/Common/Data/Constituent Services/EMM/TicketDump_R.csv")
# I usually make a "1" column to make tabulations easier
ticketdump$Tab <- 1
# Date
# Suppose you had a column with a date
ticketdump$Date <- as.Date(ticketdump$Date,"%m/%d/%Y") # Tell R it's a date
ticketdump$Month <- format(ticketdump$Date, format='%m') # Break it into month, day, year...
ticketdump$Day <- format(ticketdump$Date, format='%d')
ticketdump$Year <- format(ticketdump$Date, format='%Y')
ticketdump$Month <- as.numeric(as.character(ticketdump$Month)) # Transform month to numeric for ifelse
# There are more nuanced ways of dividing seasons, but I prefer 4 even periods:
ticketdump$Season <- ifelse((ticketdump$Month >= 3) & (ticketdump$Month <= 5), "Spring",
ifelse((ticketdump$Month >= 6) & (ticketdump$Month <= 8), "Summer",
ifelse((ticketdump$Month >= 9) & (ticketdump$Month <= 11), "Fall", "Winter")))
### Potholes ###
potholes <- ticketdump[ which(ticketdump$Type=='DPW-Pothole'),]
aggregate(Tab ~ Year, potholes, sum ) # makes a table
aggregate(Tab ~ Location, potholes, sum ) # makes a table
names(potholes)
setwd("K:/Somerstat/Common/Data/Constituent Services/EMM")
write.csv(potholes, file = "potholes.csv") #export
ticketdump <- read.csv("K:/Somerstat/Common/Data/Constituent Services/EMM/TicketDump_R.csv")
ticketdump$Date <- as.Date(ticketdump$Date,"%m/%d/%Y") # Tell R it's a date
ticketdump$Month <- format(ticketdump$Date, format='%m') # Break it into month, day, year...
ticketdump$Day <- format(ticketdump$Date, format='%d')
ticketdump$Year <- format(ticketdump$Date, format='%Y')
ticketdump$Month <- as.numeric(as.character(ticketdump$Month)) # Transform month to numeric for ifelse
# There are more nuanced ways of dividing seasons, but I prefer 4 even periods:
ticketdump$Season <- ifelse((ticketdump$Month >= 3) & (ticketdump$Month <= 5), "Spring",
ifelse((ticketdump$Month >= 6) & (ticketdump$Month <= 8), "Summer",
ifelse((ticketdump$Month >= 9) & (ticketdump$Month <= 11), "Fall", "Winter")))
potholes <- ticketdump[ which(ticketdump$Type=='DPW-Pothole'),]
jan <- potholes[ which(potholes$Month==1)]
jan <- potholes[ which(potholes$Month==1),]
jan <- potholes[ which(potholes$Month==1 & potholes$Year == 2014),]
snow <- ticketdump[ which(ticketdump$Type=='DPW-Snow-Removal' |
# ticketdump$Type=='DPW-Snow feedback (submit wo for Plowing/Sanding)' |
ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'),]
aggregate(Tab ~ Year, snow, sum ) # makes a table
ticketdump$Tab <- 1
aggregate(Tab ~ Year, snow, sum ) # makes a table
snow <- ticketdump[ which(ticketdump$Type=='DPW-Snow-Removal' |
# ticketdump$Type=='DPW-Snow feedback (submit wo for Plowing/Sanding)' |
ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'),]
aggregate(Tab ~ Year, snow, sum ) # makes a table
aggregate(Tab ~ Location, snow, sum ) # makes a table
shovel <- subset(snow, grepl("shovel", snow$Description, ignore.case=TRUE)) # st
aggregate(Tab ~ Year, shovel, sum )
shovelfinal <- ticketdump[ which(ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'),]
aggregate(Tab ~ Year, shovelfinal, sum )
shovel <- subset(snow, grepl("shovel", snow$Description, ignore.case=TRUE)) # strings mention shovel
View(shovel)
snow <- ticketdump[ which(ticketdump$Type=='DPW-Snow-Removal' |
# ticketdump$Type=='DPW-Snow feedback (submit wo for Plowing/Sanding)' |
# ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'),]
snow <- ticketdump[ which(ticketdump$Type=='DPW-Snow-Removal'
# | ticketdump$Type=='DPW-Snow feedback (submit wo for Plowing/Sanding)' |
# ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'
),]
shovel <- subset(snow, grepl("shovel", snow$Description, ignore.case=TRUE)) # strings mention shovel
snow <- ticketdump[ which(ticketdump$Type=='DPW-Snow-Removal'
# | ticketdump$Type=='DPW-Snow feedback (submit wo for Plowing/Sanding)' |
# ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'
),]
shovel <- subset(snow, grepl("shovel", snow$Description, ignore.case=TRUE)) # st
shovel2 <- ticketdump[ which(ticketdump$Type=='Health-Snow/Sidewalk not Shoveled'),]
shovelFinal <- rbind(shovel, shovel2)
View(shovelfinal)
aggregate(Tab ~ Year, shovelFinal, sum )
View(shovel)
aggregate(Tab ~ Citizen.Name, shovelFinal, sum )
callers <- aggregate(Tab ~ Citizen.Name, shovelFinal, sum )
order(callers(-Tab))
callers[order(-callers$Tab),]
View(callers)
callers <- callers[order(-callers$Tab),]
View(callers)
locations <- aggregate(Tab ~ Location, shovelFinal, sum )
locations[order(-locations$Tab),]
locations <- locations[order(-locations$Tab),]
View(locations)
View(callers)
View(shovel)
parking <- read.csv("K:/Somerstat/Common/Data/Parking/2013/dansreport120613.txt")
View(parking)
tail(parking)
parking$date <- as.Date(parking$ISSUEDATE, "%m/%d/%Y")
parking$year <- year(parking$date)
parking$month <- month(parking$date)
parking$day <- day(parking$date)
library(lubridate)
library(ggplot2)
library(plyr)
library(reshape)
parking$date <- as.Date(parking$ISSUEDATE, "%m/%d/%Y")
parking$year <- year(parking$date)
parking$month <- month(parking$date)
parking$day <- day(parking$date)
summary(parking)
# Cleans and analyzes data from the Building Data
setwd("K:/Somerstat/Common/City Departments/OSPCD/Inspectional Services/2014/2-10-2014")
Permits <- read.csv("K:/Somerstat/Common/City Departments/OSPCD/Inspectional Services/2014/2-10-2014/BuildingPermits.csv")
# Summarizes all of the data
summary(Permits)
names(Permits)
class(Permits)
sapply(Permits[1,],class)
head(Permits)
head(Permits, 20)
names(Permits)
BuildingPermits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermits.csv")
View(BuildingPermits)
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
mult_FY_value <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
View(mult_FY_value)
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Count <- 1
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermits.csv")
Assessing <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
#### Cleans Data ####
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Count <- 1
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
# Geo
# Creates a full geocodable address based on the location
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
addresses <- paste(Permits$FullAddress, "Somerville", "MA", sep=", ")
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermits.csv")
my.df <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
#### Cleans Data ####
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
sapply(my.df[1,],class)
my.df$Total.Appraised.Parcel.Value
summary(my.df$Total.Appraised.Parcel.Value)
sapply(my.df[1,],class)
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
View(Permits)
my.df$Tab <- 1
library(reshape2)
sapply(my.df[1,],class) #look at these again to see which columns to include
names(my.df) #look at the names
View(Permits)
data.m <- melt(my.df, id=c(7, 8), measure=c(9)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Fiscal.Year + Location ~ variable, sum)
View(data.m)
data.c <- dcast(data.m, Location ~ Fiscal.Year + variable, sum)
View(data.m)
View(data.c)
View(Permits)
View(data.c)
View(data.c)
View(data.c)
View(Permits)
PermitsVAssessors <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=TRUE)
View(PermitsVAssessors)
PermitsVAssessors <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=FALSE)
View(PermitsVAssessors)
write.csv(PermitsVAssessors, file = "PermitsVAssessors.csv")
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermits.csv")
assessprs <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
#### Cleans Data ####
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
# Geo
# Creates a full geocodable address based on the location
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
# Assessors Data
# I usually make a "1" column to make tabulations easier
assessprs$Tab <- 1
# aggregate works for a couple of variables.
# "Cast" from reshape2 works when you have more than two variables:
# http://marcoghislanzoni.com/blog/2013/10/11/pivot-tables-in-r-with-melt-and-cast/
library(reshape2)
sapply(assessprs[1,],class) #look at these again to see which columns to include
names(assessprs) #look at the names
data.m <- melt(assessprs, id=c(7, 8), measure=c(9)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Location ~ Fiscal.Year + variable, sum)
# Bind the two together
my.df <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=FALSE)
# write.csv(my.df, file = "PermitsVAssessors.csv")
summary(my.df)
my.df$FY13.to.FY14 <- 2014_Total.Appraised.Bldg.Value - 2013_Total.Appraised.Bldg.Value
my.df$FY13.to.FY14 <- my.df$2014_Total.Appraised.Bldg.Value - my.df$2013_Total.Appraised.Bldg.Value
my.df$'FY13.to.FY14' <- my.df$2014_Total.Appraised.Bldg.Value - my.df$2013_Total.Appraised.Bldg.Value
my.df$'FY13.to.FY14' <- my.df$'2014_Total.Appraised.Bldg.Value' - my.df$'2013_Total.Appraised.Bldg.Value'
View(my.df)
my.df$delta <- my.df$'FY13.to.FY14' - my.df$CostNumeric
histogram(my.df$delta)
hist(my.df$delta)
summary(my.df$delta)
View(my.df)
View(my.df)
plot(my.df$'FY13.to.FY14', my.df$CostNumeric)
plot(log(my.df$'FY13.to.FY14', my.df$CostNumeric))
plot(log(my.df$'FY13.to.FY14'), log(my.df$CostNumeric))
plot(log(my.df$'FY13.to.FY14'), log(my.df$CostNumeric))
hist(my.df$delta)
hist(log(my.df$delta))
hist(my.df$delta)
close <- my.df [ which(my.df$delta <100 & my.df$delta > 0), ]
close <- my.df [ which(my.df$delta < 300 & my.df$delta > 0), ]
View(close)
close <- my.df [ which(my.df$delta < 1000 & my.df$delta > 0), ]
View(close)
close <- my.df [ which(my.df$delta < 10000 & my.df$delta > 0), ]
View(close)
close <- my.df [ which(my.df$delta < 1000 ), ]
View(close)
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermits.csv")
assessors <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
#### Cleans Data ####
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
# Geo
# Creates a full geocodable address based on the location
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
# Assessors Data
# I usually make a "1" column to make tabulations easier
assessors$Tab <- 1
# aggregate works for a couple of variables.
# "Cast" from reshape2 works when you have more than two variables:
# http://marcoghislanzoni.com/blog/2013/10/11/pivot-tables-in-r-with-melt-and-cast/
library(reshape2)
sapply(assessors[1,],class) #look at these again to see which columns to include
names(assessors) #look at the names
data.m <- melt(assessors, id=c(7, 8), measure=c(9)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Location ~ Fiscal.Year + variable, sum)
# Bind the two together
my.df <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=FALSE)
# write.csv(my.df, file = "PermitsVAssessors.csv")
my.df$'FY13.to.FY14' <- my.df$'2014_Total.Appraised.Bldg.Value' - my.df$'2013_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY13.to.FY14' - my.df$CostNumeric
hist(my.df$delta)
plot(log(my.df$'FY13.to.FY14'), log(my.df$CostNumeric))
hist(log(my.df$delta))
View(data.c)
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermitsNine.csv")
assessors <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
assessors$Tab <- 1
library(reshape2)
sapply(assessors[1,],class) #look at these again to see which columns to include
names(assessors) #look at the names
data.m <- melt(assessors, id=c(7, 8), measure=c(9)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Location ~ Fiscal.Year + variable, sum)
my.df <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=FALSE)
View(my.df)
my.df$'FY10.to.FY11' <- my.df$'2011_Total.Appraised.Bldg.Value' - my.df$'2010_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY10.to.FY11' - my.df$CostNumeric
hist(my.df$delta)
plot(log(my.df$'FY13.to.FY14'), log(my.df$CostNumeric))
plot(log(my.df$'FY10.to.FY11'), log(my.df$CostNumeric))
hist(log(my.df$delta))
close <- my.df [ which(my.df$delta < 1000 & my.df$delta > 0), ]
View(close)
my.df$'FY10.to.FY11' <- my.df$'2011_Total.Appraised.Bldg.Value' - my.df$'2010_Total.Appraised.Bldg.Value'
View(my.df)
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermitsNine.csv")
assessors <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
View(Permits)
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermitsNine.csv")
assessors <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
View(Permits)
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
# Geo
# Creates a full geocodable address based on the location
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
# Assessors Data
# I usually make a "1" column to make tabulations easier
assessors$Tab <- 1
# aggregate works for a couple of variables.
# "Cast" from reshape2 works when you have more than two variables:
# http://marcoghislanzoni.com/blog/2013/10/11/pivot-tables-in-r-with-melt-and-cast/
library(reshape2)
sapply(assessors[1,],class) #look at these again to see which columns to include
names(assessors) #look at the names
data.m <- melt(assessors, id=c(7, 8), measure=c(9)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Location ~ Fiscal.Year + variable, sum)
# Bind the two together
my.df <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=FALSE)
my.df$'FY10.to.FY11' <- my.df$'2011_Total.Appraised.Bldg.Value' - my.df$'2010_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY10.to.FY11' - my.df$CostNumeric
hist(my.df$delta)
plot(log(my.df$'FY10.to.FY11'), log(my.df$CostNumeric))
close <- my.df [ which(my.df$delta < 1000 & my.df$delta > 0), ]
summary(my.df$delta)
my.df$'FY09.to.FY10' <- my.df$'2010_Total.Appraised.Bldg.Value' - my.df$'2009_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY09.to.FY10' - my.df$CostNumeric
hist(my.df$delta)
plot(log(my.df$'FY09.to.FY10'), log(my.df$CostNumeric))
hist(log(my.df$delta))
hist(my.df$delta)
summary(my.df$delta)
close <- my.df [ which(my.df$delta < 1000 & my.df$delta > 0), ]
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermitsNine.csv")
assessors <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
#### Cleans Data ####
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
# Geo
# Creates a full geocodable address based on the location
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
# Assessors Data
# I usually make a "1" column to make tabulations easier
assessors$Tab <- 1
# aggregate works for a couple of variables.
# "Cast" from reshape2 works when you have more than two variables:
# http://marcoghislanzoni.com/blog/2013/10/11/pivot-tables-in-r-with-melt-and-cast/
library(reshape2)
sapply(assessors[1,],class) #look at these again to see which columns to include
names(assessors) #look at the names
data.m <- melt(assessors, id=c(7, 8), measure=c(9)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Location ~ Fiscal.Year + variable, sum)
my.df <- merge(data.c, Permits, by.x="Location", by.y="FullAddress" , all=FALSE)
my.df$'FY09.to.FY10' <- my.df$'2010_Total.Appraised.Bldg.Value' - my.df$'2009_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY09.to.FY10' - my.df$CostNumeric
hist(my.df$delta)
View(my.df)
pos <- my.df [ which(my.df$FY09.to.FY10 > 0), ]
View(pos)
hist(pos$delta)
plot(log(pos$'FY09.to.FY10'), log(pos$CostNumeric))
hist(log(pos$delta))
summary(pos$delta)
pos <- post [ which(pos$delta < 50000), ]
pos <- pos [ which(pos$delta < 50000), ]
summary(pos$delta)
pos <- pos [ which(pos$delta < 50000 & pos$delta > 0), ]
summary(pos$delta)
hist(pos$delta)
my.df$'FY09.to.FY11' <- my.df$'2011_Total.Appraised.Bldg.Value' - my.df$'2009_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY09.to.FY11' - my.df$CostNumeric
hist(my.df$delta)
plot(log(my.df$'FY09.to.FY10'), log(my.df$CostNumeric))
hist(log(my.df$delta))
# Just positive change to weed out the ones in the wrong FY
pos <- my.df [ which(my.df$FY09.to.FY11 > 0), ]
hist(pos$delta)
plot(log(pos$'FY09.to.FY11'), log(pos$CostNumeric))
hist(log(pos$delta))
plot(log(pos$'FY09.to.FY11'), log(pos$CostNumeric))
summary(pos$delta)
View(pos)
hist(pos$delta)
pos <- pos [ which(pos$delta < 50000 & pos$delta > 0), ]
my.df$'FY09.to.FY11' <- my.df$'2011_Total.Appraised.Bldg.Value' - my.df$'2009_Total.Appraised.Bldg.Value'
my.df$delta <- my.df$'FY09.to.FY11' - my.df$CostNumeric
hist(my.df$delta)
plot(log(my.df$'FY09.to.FY10'), log(my.df$CostNumeric))
hist(log(my.df$delta))
# Just positive change to weed out the ones in the wrong FY
pos <- my.df [ which(my.df$FY09.to.FY11 > 0), ]
hist(pos$delta)
plot(log(pos$'FY09.to.FY11'), log(pos$CostNumeric))
hist(log(pos$delta))
summary(pos$delta)
pos2 <- pos [ which(pos$delta < 500000 & pos$delta > 0), ]
View(pos2)
View(pos2)
pos2 <- pos [ which(pos$delta < 900000 & pos$delta > 0), ]
hist(pos2$delta)
pos2 <- pos [ which(pos$delta < 30000 & pos$delta > 0), ]
hist(pos2$delta)
pos2 <- pos [ which(pos$delta < 300000 & pos$delta > 0), ]
pos2 <- pos [ which(pos$delta < 90000 & pos$delta > 0), ]
hist(pos2$delta)
plot(log(pos$'FY09.to.FY11'), log(pos$CostNumeric))
fit <- lm(CostNumeric ~ 'FY09.to.FY11', data=pos)
summary(fit) # show results
fit <- lm('CostNumeric' ~ 'FY09.to.FY11', data=pos)
fit <- lm(CostNumeric ~ FY09.to.FY11, data=pos)
summary(fit) # show results
# Cleans and analyzes data from the Building Data
# There is analysis of the building data below
setwd("K:/Somerstat/Common/Data/2014 Permits v Assessing")
Permits <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/BuildingPermits.csv")
my.df <- read.csv("K:/Somerstat/Common/Data/2014 Permits v Assessing/mult_FY_value.csv")
#### Cleans Data ####
Permits$FeeNumeric <- as.numeric(as.character(Permits$FEE))
Permits$CostNumeric <- as.numeric(as.character(Permits$COST))
Permits$Tab <- 1
## Date
Permits$Date <- as.Date(Permits$ISSUED,"%m/%d/%Y")
Permits$Month <- format(Permits$Date, format='%m')
Permits$Day <- format(Permits$Date, format='%d')
Permits$Year <- format(Permits$Date, format='%Y')
# Geo
# Creates a full geocodable address based on the location
Permits$FullAddress <- paste(Permits$ST., Permits$STREET, sep=" ")
# Assessors Data
# I usually make a "1" column to make tabulations easier
my.df$Tab <- 1
View(Permits)
summary(Permits$Fee)
setwd("K:/Somerstat/Common/Data/2014 StreetStat/PCI_Code")
d <- read.csv("PCI.csv")
